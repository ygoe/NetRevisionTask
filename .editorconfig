# Documentation:
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference

# Top-most EditorConfig file
root = true

[*]
insert_final_newline = true
end_of_line = crlf
indent_style = tab
vsspell_section_id = 7001f507961747b8a917eb15b0da2eb2
vsspell_ignored_words_7001f507961747b8a917eb15b0da2eb2 = Api|Committer|fallback|Utc|Util|Vcs

[*.{cs,vb}]
# Sort using and Import directives with System.* appearing first
dotnet_sort_system_directives_first = true

# Avoid "this." and "Me." if not necessary
dotnet_style_qualification_for_event = false:warning
dotnet_style_qualification_for_field = false:warning
dotnet_style_qualification_for_method = false:warning
dotnet_style_qualification_for_property = false:warning

# Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning

# Suggest explicit accessibility modifiers
dotnet_style_require_accessibility_modifiers = always:suggestion

# Suggest more modern language features when available
dotnet_style_explicit_tuple_names = true:warning
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true:none
dotnet_style_prefer_conditional_expression_over_return = true:none
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion

# Definitions
dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum, delegate, type_parameter
dotnet_naming_symbols.methods_properties.applicable_kinds = method, local_function, property
dotnet_naming_symbols.public_symbols.applicable_kinds = property, method, field, event
dotnet_naming_symbols.public_symbols.applicable_accessibilities = public
dotnet_naming_symbols.constant_fields.applicable_kinds = field
dotnet_naming_symbols.constant_fields.required_modifiers = const
dotnet_naming_symbols.private_protected_internal_fields.applicable_kinds = field
dotnet_naming_symbols.private_protected_internal_fields.applicable_accessibilities = private, protected, internal
dotnet_naming_symbols.parameters_locals.applicable_kinds = parameter, local
dotnet_naming_style.pascal_case_style.capitalization = pascal_case
dotnet_naming_style.camel_case_style.capitalization = camel_case

# Name all types using PascalCase
dotnet_naming_rule.types_must_be_capitalized.symbols = types
dotnet_naming_rule.types_must_be_capitalized.style = pascal_case_style
dotnet_naming_rule.types_must_be_capitalized.severity = warning

# Name all methods and properties using PascalCase
dotnet_naming_rule.methods_properties_must_be_capitalized.symbols = methods_properties
dotnet_naming_rule.methods_properties_must_be_capitalized.style = pascal_case_style
dotnet_naming_rule.methods_properties_must_be_capitalized.severity = warning

# Name all public members using PascalCase
dotnet_naming_rule.public_members_must_be_capitalized.symbols = public_symbols
dotnet_naming_rule.public_members_must_be_capitalized.style = pascal_case_style
dotnet_naming_rule.public_members_must_be_capitalized.severity = warning

# Name all constant fields using PascalCase
dotnet_naming_rule.constant_fields_must_be_pascal_case.symbols = constant_fields
dotnet_naming_rule.constant_fields_must_be_pascal_case.style = pascal_case_style
dotnet_naming_rule.constant_fields_must_be_pascal_case.severity = suggestion

# Name all private and internal fields using camelCase
dotnet_naming_rule.private_protected_internal_fields_must_be_camel_case.symbols = private_protected_internal_fields
dotnet_naming_rule.private_protected_internal_fields_must_be_camel_case.style = camel_case_style
dotnet_naming_rule.private_protected_internal_fields_must_be_camel_case.severity = warning

# Name all parameters and locals using camelCase
dotnet_naming_rule.parameters_locals_must_be_camel_case.symbols = parameters_locals
dotnet_naming_rule.parameters_locals_must_be_camel_case.style = camel_case_style
dotnet_naming_rule.parameters_locals_must_be_camel_case.severity = warning

[*.cs]
csharp_preferred_modifier_order = public, private, protected, internal, static, extern, new, virtual, abstract, sealed, override, readonly, unsafe, volatile, async:suggestion

# Only use "var" when it's obvious what the variable type is
csharp_style_var_for_built_in_types = false:warning
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = false:none

# Prefer method-like constructs to have a block body
csharp_style_expression_bodied_methods = false:none
csharp_style_expression_bodied_constructors = false:none
csharp_style_expression_bodied_operators = false:none

# Prefer property-like constructs to have an expression-body
csharp_style_expression_bodied_properties = true:none
csharp_style_expression_bodied_indexers = true:none
csharp_style_expression_bodied_accessors = true:none

# Suggest more modern language features when available
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion
csharp_style_pattern_local_over_anonymous_function = true:suggestion

# Newline settings
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = one_less_than_current

# Space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = do_not_ignore
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# VSSpell001: Spell Check
dotnet_diagnostic.VSSpell001.severity = suggestion

[*.{xml,csproj,targets,props,json}]
indent_size = 2
indent_style = space
